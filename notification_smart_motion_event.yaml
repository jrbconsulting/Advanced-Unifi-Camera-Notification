blueprint:
  name: UniFi Protect Motion / Smart Detection Notifications
  domain: automation
  source_url: https://raw.githubusercontent.com/jrbconsulting/Advanced-Unifi-Camera-Notification/main/notification_smart_motion_event.yaml
  description: |
    ## UniFi Protect Motion / Smart Detection Notifications

    This blueprint will send push notifications to a Home Assistant mobile app when a camera detections motion or a
    smart detection.

    ### Required Settings

      - UniFi Protect Smart Detection enabled camera or sensor

    ### Optional Settings

      - Notification target for the [mobile app notification target][1].
      - Time formatting strings. Timestamp is injected into the notification in case the notification is delay.
      - Cooldown before sending another notification
      - Silence timer for muting notifications via Actionable Notification (docs: [Mobile][2])
      - Configurable lovelace view from notification
      - Ability to change the color of the notification

    ### Requirements

    To take full effect of this automation blueprint, your Home Assistant instance needs some setup beforehand.

    - An UniFi Protect camera that has smart detections enabled. Only cameras that are capable of smart detections (G4, AI or G5 Series cameras) will have smart detection sensors.
    - You will need to configure the 'Motion Zones', 'Smart Detection Zones', and/or 'Crossing Lines' in Unifi Protect controller in order for the smart detections to trigger.
    - A valid HTTPS certificate and [properly configured external URL][3]
      - If you are using Home Assistant Cloud, this is already set up for you.
      - If this is not setup correctly, the actionable notifications and attachments will not appear in the notifications.
      - You do not need your _whole_ Home Assistant to be publicly accessible. Only the paths `/api/unifiprotect/*` and
        `/api/webhook/*` need to be accessible outside of your network.
    - Highly recommend the use of a tunnel like Cloudflare tunnels to secure your HA remote access.
    
    ### Credits

    This Blueprint has been modified and had a few changes from the original AngellusMortis/notification_smart_motion_event blueprint.
    Please give his blueprint some love as it is absolutely brilliant!

    [1]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
    [2]: https://companion.home-assistant.io/docs/notifications/actionable-notifications/
    [3]: https://www.home-assistant.io/docs/configuration/remote/
  input:
    obj_sensor:
      name: Detection Sensor
      description: >
        The "Motion/Person/Camera etc. Detected" sensor(s) to use.
      selector:
        entity:
          integration: unifiprotect
          domain: binary_sensor
          multiple: true
    presence_filter:
      name: (Optional) Enable Presence detection
      description: >
        If you would like this Blueprint to only send notifications when you are away from home (presence), enable this option.
        If you find that you are having issues with the notifications firing, ensure that either Presence detection or Alarm Control Panel are set; not both.
        Choose the entities that you would like to track the location of.
      default: ""
      selector:
        entity:
          domain: device_tracker
          multiple: true
    alarm_controlpanel:
      name: (Optional) Enable Alarm Control Panel
      description: >
        If you would like this Blueprint to only send notifications when you have the Alarm Control panel "Armed", enable this option.
        If you find that you are having issues with the notifications firing, ensure that either Presence detection or Alarm Control Panel are enabled; not both.
        If you do not have an existing Alarm Panel installed, Alarmo is a great free option to create a virtual alarm for all your sensors.
        Choose the entities that you would like to track the "Armed" status of.
      default: ""
      selector:
        entity:
          domain: alarm_control_panel
          multiple: true
    notify_target_app:
      name: (Optional) Notification Target (Mobile App)
      description: >
        The notification target for mobile apps notifications. Can be `notifiy.notify` or any Mobile app notify service
        (starts with `notify.mobile_app_`). We recommend creating a group for "Alarm" with all the devices you want to use.
        https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
      default: "notify.notify"
      selector:
        text:
    channel:
      name: (Optional) Notification Channel
      description: >
        Notification channel/tag to use. Will automatically be prepended with
        "Manual " if action is triggered manually.
        https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-channels
      default: Smart Detection
      selector:
        text:
    color:
      name: (Optional) Notification Color
      description: >
        Notification colour to use. Will automatically be prepended with
        Pink if action is triggered manually.
        https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-color
        https://companion.home-assistant.io/docs/notifications/notifications-basic/#notification-led-color
      default: red
      selector:
        text:
    notificationicon:
      name: (Optional) Notification Icon
      description: |
        Icon to use for notification
        If left blank, will use standard HA Icon.
        This should be a URL relating to your installation or a publically accesable file ie. https://github.com/jrbconsulting/Home-Assistant/blob/main/Blueprints/automation/unifiprotect/unifi-icon.jpg
      default: ""
      selector:
        text:
#    enable_google_ai_summary:
#      name: (Optional) Enable Google AI Summary
#      description: >
#        Google has a great feature where it will analyse the content of the image sent to it and present a description.
#        This is NOT local, and can be hit and miss. It may also delay notifications by an unknown amount of time.
#      default: false
#      selector:
#        boolean:
#    google_ai_summary_prompt:
#      name: Prompt to use with Google AI
#      description: >
#        This prompt will tell the Google AI what you would like to know about your images and any parameters around describing the image.
#      default: ""
#      selector:
#        text:

    time_format:
      name: (Optional) Time Format String
      description: >
        Python datetime format code string for the event trigger time. This string is
        the actual time the doorbell event was triggered in case the automation or
        notification is delayed. Manual triggers will cause this to always be the time
        of the previous event.
        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes
      default: "%I:%M %p"
      selector:
        entity:

    cooldown:
      name: (Optional) Cooldown
      description: >
        Delay before sending another notification for this camera after the last event.
        Is also the interval you have to respond to actions in notification.
      default: 120
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: seconds
    silence_timer:
      name: (Optional) Silence Notifications
      description: >
        How long to silence notifications for this camera when requested as part of the
        actionable notification. The time interval you have to respond to the slient
        action is controlled by "Cooldown". Short Cooldown timers may prevent you from
        silencing.
      default: 30
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: minutes
    lovelace_view:
      name: (Optional) Lovelace View
      description: |
        Home Assistant Lovelace view to open when clicking notification.
        If left blank, URI Notification actions will not be generated.
        This should be a URL relating to your installation ie. https://home.mydomain.com/main-dashboard/large-cameraname
        Personally I created a blank dashboard, set the view to 'Panel' then added a live camera card for the playback
      default: ""
      selector:
        text:
    debug_event_id:
      name: (Optional) Debug Event ID
      description: >
        Debug Event ID for UniFi Protect to use for when manually triggering automation.
        Will be used to generate a thumbnail for testing notifications.
      default: ""
      selector:
        text:


mode: single
max_exceeded: silent

variables:
  # input vars
  input_obj: !input obj_sensor
  input_channel: !input channel
  input_color: !input color
  input_lovelace_view: !input lovelace_view
  input_notify_target_app: !input notify_target_app
  input_silence_timer: !input silence_timer
  input_time_format: !input time_format
  input_presence_filter: !input presence_filter
  input_alarm_controlpanel: !input alarm_controlpanel
#  input_enable_google_ai_summary: !input enable_google_ai_summary
#  input_google_ai_summary_prompt: !input google_ai_summary_prompt
  input_debug_event_id: !input debug_event_id
  input_cooldown: !input cooldown
  lovelace_view: "{{ input_lovelace_view | trim }}"
  is_manual: "{{ 'from_state' not in trigger }}"
  entity_id: "{% if is_manual %}{{ input_obj[0] }}{% else %}{{ trigger.entity_id }}{% endif %}"
  entity_name: "{{ state_attr(entity_id, 'friendly_name') }}"
  device_id: "{{ device_id(entity_id) }}"
  camera_entities: '[{% for eid in device_entities(device_id) %}{%if eid.startswith(''camera'') and not ''package'' in eid and not is_state(eid, ''unavailable'') %}"{{ eid }}",{% endif %}{% endfor %}]'
  camera_entity_id: "{{ camera_entities | default([None]) | first }}"
  event_id: "{% if is_manual %}{{ input_debug_event_id }}{% else %}{{ state_attr(entity_id, 'event_id') }}{% endif %}"
  video_start: "{{ states[entity_id].last_changed.isoformat() }}"
  trigger_time: |
    {% if states[entity_id] == None %}
      None
    {% else %}
      {{ as_local(states[entity_id].last_changed).strftime(input_time_format) }}
    {% endif %}
  notification_channel: |
    {% if is_manual %}
      Manual {{ input_channel }}
    {% else %}
      {{ input_channel }}
    {% endif %}
  notification_color: |
    {% if is_manual %}
      pink
    {% else %}
      {{ input_color }}
    {% endif %}
  notification_title: "{{ entity_name }}"
  notification_tag: "{{ notification_channel.lower().replace(' ', '-') }}"
  notification_message: "{{ entity_name }}{% if trigger_time != None %} at {{ trigger_time }}{% endif %}."
  notification_image: "/api/unifiprotect/thumbnail/{{ config_entry_id(entity_id) }}/{{ event_id }}"
  notification_url: |
    {% if lovelace_view == "" %}
      None
    {% else %}
      {{ lovelace_view }}
    {% endif %}
  notification_icon: !input notificationicon
  silence_action: "silence-smart-{{ entity_id }}"

trigger:
  - platform: state
    entity_id: obj_sensor
    from: "off"
    to: "on"

condition:
  - condition: or
    conditions:
      - "{{ not input_presence_filter or (input_presence_filter | select('is_state', 'home') | list | count) == 0 }}"
      - "{{ not input_alarm_controlpanel or (input_alarm_controlpanel | select('is_state', 'disarmed') | list | count) == 0 }}"    

action:
#  - if:
#      - condition: state
#        entity_id: !input enable_google_ai_summary
#        state: "on"
#    then:
#      - service: google_generative_ai_conversation.generate_content
#        data:
#          prompt: "{{ google_ai_summary_prompt }}"
#          image_filename: "{{ notification_image }}"
#        response_variable: google_ai_response
  - service: "{{ input_notify_target_app }}"
    data:
      message: "{{ notification_message }}"
      title: "{{ notification_title }} - {{ google_ai_response }} "
      data:
        # Android/iOS notification tag - I'm removing as I don't want it to replace the previous notification
        #tag: "{{ notification_tag }}"
        # Android notification Channel
        channel: "{{ notification_channel }}"
        group: "{{ notification_channel }}"
        # Android notification Colour
        color: "{{ notification_color }}"
        ledColor: "{{ notification_color }}"
        # Show in Android auto
        car_ui: true
        # Icon URL
        icon_url: notification_icon
        # Notification Bar Icon
        notification_icon: "mdi:cctv"
        # Android high prority
        ttl: 0
        priority: high
        # iOS high prority
        time-sensitive: 1
        image: "{{ notification_image }}"
        # only for iOS
        entity_id: "{{ camera_entity_id }}"
        actions: >
          [{% if notification_url != None %}
          { "action": "URI", "title": "Open Camera", "uri": "{{ notification_url }}" },
          {% endif %}
          {% if input_silence_timer > 0 %}
          { "action": "{{ silence_action }}", "title": "Silence", "destructive": True },
          {% endif %}]
  - wait_for_trigger:
      - platform: event
        event_type: mobile_app_notification_action
        event_data:
          action: "{{ silence_action }}"
      - platform: event
        event_type: mobile_app_notification_cleared
        event_data:
          message: "{{ notification_message }}"
      - platform: state
        entity_id: !input obj_sensor
        to: "off"
    timeout:
      seconds: "{{ input_cooldown }}"
    continue_on_timeout: false
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ wait.trigger.platform == 'state' }}"
        sequence:
          - service: "{{ input_notify_target_app }}"
            data:
              message: "{{ notification_message }}"
              title: "{{ notification_title }}"
              data:
                # Android/iOS notification tag - I'm removing as I don't want it to replace the previous notification
                #tag: "{{ notification_tag }}"
                # Android notification Channel
                channel: "{{ notification_channel }}"
                group: "{{ notification_channel }}"
                # Android notification Colour
                color: "{{ notification_color }}"
                ledColor: "{{ notification_color }}"
                # Show in Android auto
                car_ui: true
                # Icon URL
                icon_url: notification_icon
                # Notification Bar Icon
                notification_icon: "mdi:cctv"
                # Android high prority
                ttl: 0
                priority: high
                # iOS high prority
                time-sensitive: 1
                image: "{{ notification_image }}"
                video: "/api/unifiprotect/video/{{ config_entry_id(entity_id) }}/{{ entity_id }}/{{ video_start }}/{{ states[entity_id].last_changed.isoformat() }}"
                actions: >
                  [{% if notification_url != None %}
                  { "action": "URI", "title": "Open Camera", "uri": "{{ notification_url }}" },
                  {% endif %}
                  {% if input_silence_timer > 0 %}
                  { "action": "{{ silence_action }}", "title": "Silence", "destructive": True },
                  {% endif %}]
          - wait_for_trigger:
              - platform: event
                event_type: mobile_app_notification_action
                event_data:
                  action: "{{ silence_action }}"
            timeout:
              seconds: "{{ max([input_cooldown - (states[entity_id].last_changed - as_datetime(video_start)).total_seconds(), 5]) }}"
            continue_on_timeout: false
      - conditions:
          - condition: template
            value_template: "{{ wait.trigger.platform == 'event' and wait.trigger.event.event_type == 'mobile_app_notification_action' }}"
        sequence:
          - delay:
              minutes: "{{ input_silence_timer }}"
      - conditions:
          - condition: template
            value_template: "{{ wait.trigger.platform == 'event' and wait.trigger.event.event_type == 'mobile_app_notification_cleared' }}"
        sequence:
          - delay:
              seconds: "{{ max([input_cooldown - (wait.trigger.event.time_fired - as_datetime(video_start)).total_seconds(), 5]) }}"